// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: EPICSEvent.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An enumeration that indicates what PB message should be used to unmarshall the following chunk of data
// This is a copy of ArchDBRTypes and the numbers must match the integermap in ArchDBRTypes for the reverse lookup to work
// Look at DBR2PBTypeMapping to see how we can construct a hashmap that unmarshalls an appropriate language type based on this enum.
type PayloadType int32

const (
	PayloadType_SCALAR_STRING    PayloadType = 0
	PayloadType_SCALAR_SHORT     PayloadType = 1
	PayloadType_SCALAR_FLOAT     PayloadType = 2
	PayloadType_SCALAR_ENUM      PayloadType = 3
	PayloadType_SCALAR_BYTE      PayloadType = 4
	PayloadType_SCALAR_INT       PayloadType = 5
	PayloadType_SCALAR_DOUBLE    PayloadType = 6
	PayloadType_WAVEFORM_STRING  PayloadType = 7
	PayloadType_WAVEFORM_SHORT   PayloadType = 8
	PayloadType_WAVEFORM_FLOAT   PayloadType = 9
	PayloadType_WAVEFORM_ENUM    PayloadType = 10
	PayloadType_WAVEFORM_BYTE    PayloadType = 11
	PayloadType_WAVEFORM_INT     PayloadType = 12
	PayloadType_WAVEFORM_DOUBLE  PayloadType = 13
	PayloadType_V4_GENERIC_BYTES PayloadType = 14
)

// Enum value maps for PayloadType.
var (
	PayloadType_name = map[int32]string{
		0:  "SCALAR_STRING",
		1:  "SCALAR_SHORT",
		2:  "SCALAR_FLOAT",
		3:  "SCALAR_ENUM",
		4:  "SCALAR_BYTE",
		5:  "SCALAR_INT",
		6:  "SCALAR_DOUBLE",
		7:  "WAVEFORM_STRING",
		8:  "WAVEFORM_SHORT",
		9:  "WAVEFORM_FLOAT",
		10: "WAVEFORM_ENUM",
		11: "WAVEFORM_BYTE",
		12: "WAVEFORM_INT",
		13: "WAVEFORM_DOUBLE",
		14: "V4_GENERIC_BYTES",
	}
	PayloadType_value = map[string]int32{
		"SCALAR_STRING":    0,
		"SCALAR_SHORT":     1,
		"SCALAR_FLOAT":     2,
		"SCALAR_ENUM":      3,
		"SCALAR_BYTE":      4,
		"SCALAR_INT":       5,
		"SCALAR_DOUBLE":    6,
		"WAVEFORM_STRING":  7,
		"WAVEFORM_SHORT":   8,
		"WAVEFORM_FLOAT":   9,
		"WAVEFORM_ENUM":    10,
		"WAVEFORM_BYTE":    11,
		"WAVEFORM_INT":     12,
		"WAVEFORM_DOUBLE":  13,
		"V4_GENERIC_BYTES": 14,
	}
)

func (x PayloadType) Enum() *PayloadType {
	p := new(PayloadType)
	*p = x
	return p
}

func (x PayloadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayloadType) Descriptor() protoreflect.EnumDescriptor {
	return file_EPICSEvent_proto_enumTypes[0].Descriptor()
}

func (PayloadType) Type() protoreflect.EnumType {
	return &file_EPICSEvent_proto_enumTypes[0]
}

func (x PayloadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PayloadType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PayloadType(num)
	return nil
}

// Deprecated: Use PayloadType.Descriptor instead.
func (PayloadType) EnumDescriptor() ([]byte, []int) {
	return file_EPICSEvent_proto_rawDescGZIP(), []int{0}
}

type FieldValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Val  *string `protobuf:"bytes,2,req,name=val" json:"val,omitempty"`
}

func (x *FieldValue) Reset() {
	*x = FieldValue{}
	mi := &file_EPICSEvent_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldValue) ProtoMessage() {}

func (x *FieldValue) ProtoReflect() protoreflect.Message {
	mi := &file_EPICSEvent_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldValue.ProtoReflect.Descriptor instead.
func (*FieldValue) Descriptor() ([]byte, []int) {
	return file_EPICSEvent_proto_rawDescGZIP(), []int{0}
}

func (x *FieldValue) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FieldValue) GetVal() string {
	if x != nil && x.Val != nil {
		return *x.Val
	}
	return ""
}

type ScalarString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secondsintoyear   *uint32       `protobuf:"varint,1,req,name=secondsintoyear" json:"secondsintoyear,omitempty"`
	Nano              *uint32       `protobuf:"varint,2,req,name=nano" json:"nano,omitempty"`
	Val               *string       `protobuf:"bytes,3,req,name=val" json:"val,omitempty"`
	Severity          *int32        `protobuf:"varint,4,opt,name=severity,def=0" json:"severity,omitempty"`
	Status            *int32        `protobuf:"varint,5,opt,name=status,def=0" json:"status,omitempty"`
	Repeatcount       *uint32       `protobuf:"varint,6,opt,name=repeatcount" json:"repeatcount,omitempty"`
	Fieldvalues       []*FieldValue `protobuf:"bytes,7,rep,name=fieldvalues" json:"fieldvalues,omitempty"`
	Fieldactualchange *bool         `protobuf:"varint,8,opt,name=fieldactualchange" json:"fieldactualchange,omitempty"`
}

// Default values for ScalarString fields.
const (
	Default_ScalarString_Severity = int32(0)
	Default_ScalarString_Status   = int32(0)
)

func (x *ScalarString) Reset() {
	*x = ScalarString{}
	mi := &file_EPICSEvent_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScalarString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarString) ProtoMessage() {}

func (x *ScalarString) ProtoReflect() protoreflect.Message {
	mi := &file_EPICSEvent_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarString.ProtoReflect.Descriptor instead.
func (*ScalarString) Descriptor() ([]byte, []int) {
	return file_EPICSEvent_proto_rawDescGZIP(), []int{1}
}

func (x *ScalarString) GetSecondsintoyear() uint32 {
	if x != nil && x.Secondsintoyear != nil {
		return *x.Secondsintoyear
	}
	return 0
}

func (x *ScalarString) GetNano() uint32 {
	if x != nil && x.Nano != nil {
		return *x.Nano
	}
	return 0
}

func (x *ScalarString) GetVal() string {
	if x != nil && x.Val != nil {
		return *x.Val
	}
	return ""
}

func (x *ScalarString) GetSeverity() int32 {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return Default_ScalarString_Severity
}

func (x *ScalarString) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_ScalarString_Status
}

func (x *ScalarString) GetRepeatcount() uint32 {
	if x != nil && x.Repeatcount != nil {
		return *x.Repeatcount
	}
	return 0
}

func (x *ScalarString) GetFieldvalues() []*FieldValue {
	if x != nil {
		return x.Fieldvalues
	}
	return nil
}

func (x *ScalarString) GetFieldactualchange() bool {
	if x != nil && x.Fieldactualchange != nil {
		return *x.Fieldactualchange
	}
	return false
}

type ScalarByte struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secondsintoyear   *uint32       `protobuf:"varint,1,req,name=secondsintoyear" json:"secondsintoyear,omitempty"`
	Nano              *uint32       `protobuf:"varint,2,req,name=nano" json:"nano,omitempty"`
	Val               []byte        `protobuf:"bytes,3,req,name=val" json:"val,omitempty"`
	Severity          *int32        `protobuf:"varint,4,opt,name=severity,def=0" json:"severity,omitempty"`
	Status            *int32        `protobuf:"varint,5,opt,name=status,def=0" json:"status,omitempty"`
	Repeatcount       *uint32       `protobuf:"varint,6,opt,name=repeatcount" json:"repeatcount,omitempty"`
	Fieldvalues       []*FieldValue `protobuf:"bytes,7,rep,name=fieldvalues" json:"fieldvalues,omitempty"`
	Fieldactualchange *bool         `protobuf:"varint,8,opt,name=fieldactualchange" json:"fieldactualchange,omitempty"`
}

// Default values for ScalarByte fields.
const (
	Default_ScalarByte_Severity = int32(0)
	Default_ScalarByte_Status   = int32(0)
)

func (x *ScalarByte) Reset() {
	*x = ScalarByte{}
	mi := &file_EPICSEvent_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScalarByte) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarByte) ProtoMessage() {}

func (x *ScalarByte) ProtoReflect() protoreflect.Message {
	mi := &file_EPICSEvent_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarByte.ProtoReflect.Descriptor instead.
func (*ScalarByte) Descriptor() ([]byte, []int) {
	return file_EPICSEvent_proto_rawDescGZIP(), []int{2}
}

func (x *ScalarByte) GetSecondsintoyear() uint32 {
	if x != nil && x.Secondsintoyear != nil {
		return *x.Secondsintoyear
	}
	return 0
}

func (x *ScalarByte) GetNano() uint32 {
	if x != nil && x.Nano != nil {
		return *x.Nano
	}
	return 0
}

func (x *ScalarByte) GetVal() []byte {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *ScalarByte) GetSeverity() int32 {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return Default_ScalarByte_Severity
}

func (x *ScalarByte) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_ScalarByte_Status
}

func (x *ScalarByte) GetRepeatcount() uint32 {
	if x != nil && x.Repeatcount != nil {
		return *x.Repeatcount
	}
	return 0
}

func (x *ScalarByte) GetFieldvalues() []*FieldValue {
	if x != nil {
		return x.Fieldvalues
	}
	return nil
}

func (x *ScalarByte) GetFieldactualchange() bool {
	if x != nil && x.Fieldactualchange != nil {
		return *x.Fieldactualchange
	}
	return false
}

type ScalarShort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secondsintoyear   *uint32       `protobuf:"varint,1,req,name=secondsintoyear" json:"secondsintoyear,omitempty"`
	Nano              *uint32       `protobuf:"varint,2,req,name=nano" json:"nano,omitempty"`
	Val               *int32        `protobuf:"zigzag32,3,req,name=val" json:"val,omitempty"`
	Severity          *int32        `protobuf:"varint,4,opt,name=severity,def=0" json:"severity,omitempty"`
	Status            *int32        `protobuf:"varint,5,opt,name=status,def=0" json:"status,omitempty"`
	Repeatcount       *uint32       `protobuf:"varint,6,opt,name=repeatcount" json:"repeatcount,omitempty"`
	Fieldvalues       []*FieldValue `protobuf:"bytes,7,rep,name=fieldvalues" json:"fieldvalues,omitempty"`
	Fieldactualchange *bool         `protobuf:"varint,8,opt,name=fieldactualchange" json:"fieldactualchange,omitempty"`
}

// Default values for ScalarShort fields.
const (
	Default_ScalarShort_Severity = int32(0)
	Default_ScalarShort_Status   = int32(0)
)

func (x *ScalarShort) Reset() {
	*x = ScalarShort{}
	mi := &file_EPICSEvent_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScalarShort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarShort) ProtoMessage() {}

func (x *ScalarShort) ProtoReflect() protoreflect.Message {
	mi := &file_EPICSEvent_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarShort.ProtoReflect.Descriptor instead.
func (*ScalarShort) Descriptor() ([]byte, []int) {
	return file_EPICSEvent_proto_rawDescGZIP(), []int{3}
}

func (x *ScalarShort) GetSecondsintoyear() uint32 {
	if x != nil && x.Secondsintoyear != nil {
		return *x.Secondsintoyear
	}
	return 0
}

func (x *ScalarShort) GetNano() uint32 {
	if x != nil && x.Nano != nil {
		return *x.Nano
	}
	return 0
}

func (x *ScalarShort) GetVal() int32 {
	if x != nil && x.Val != nil {
		return *x.Val
	}
	return 0
}

func (x *ScalarShort) GetSeverity() int32 {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return Default_ScalarShort_Severity
}

func (x *ScalarShort) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_ScalarShort_Status
}

func (x *ScalarShort) GetRepeatcount() uint32 {
	if x != nil && x.Repeatcount != nil {
		return *x.Repeatcount
	}
	return 0
}

func (x *ScalarShort) GetFieldvalues() []*FieldValue {
	if x != nil {
		return x.Fieldvalues
	}
	return nil
}

func (x *ScalarShort) GetFieldactualchange() bool {
	if x != nil && x.Fieldactualchange != nil {
		return *x.Fieldactualchange
	}
	return false
}

type ScalarInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secondsintoyear   *uint32       `protobuf:"varint,1,req,name=secondsintoyear" json:"secondsintoyear,omitempty"`
	Nano              *uint32       `protobuf:"varint,2,req,name=nano" json:"nano,omitempty"`
	Val               *int32        `protobuf:"fixed32,3,req,name=val" json:"val,omitempty"`
	Severity          *int32        `protobuf:"varint,4,opt,name=severity,def=0" json:"severity,omitempty"`
	Status            *int32        `protobuf:"varint,5,opt,name=status,def=0" json:"status,omitempty"`
	Repeatcount       *uint32       `protobuf:"varint,6,opt,name=repeatcount" json:"repeatcount,omitempty"`
	Fieldvalues       []*FieldValue `protobuf:"bytes,7,rep,name=fieldvalues" json:"fieldvalues,omitempty"`
	Fieldactualchange *bool         `protobuf:"varint,8,opt,name=fieldactualchange" json:"fieldactualchange,omitempty"`
}

// Default values for ScalarInt fields.
const (
	Default_ScalarInt_Severity = int32(0)
	Default_ScalarInt_Status   = int32(0)
)

func (x *ScalarInt) Reset() {
	*x = ScalarInt{}
	mi := &file_EPICSEvent_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScalarInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarInt) ProtoMessage() {}

func (x *ScalarInt) ProtoReflect() protoreflect.Message {
	mi := &file_EPICSEvent_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarInt.ProtoReflect.Descriptor instead.
func (*ScalarInt) Descriptor() ([]byte, []int) {
	return file_EPICSEvent_proto_rawDescGZIP(), []int{4}
}

func (x *ScalarInt) GetSecondsintoyear() uint32 {
	if x != nil && x.Secondsintoyear != nil {
		return *x.Secondsintoyear
	}
	return 0
}

func (x *ScalarInt) GetNano() uint32 {
	if x != nil && x.Nano != nil {
		return *x.Nano
	}
	return 0
}

func (x *ScalarInt) GetVal() int32 {
	if x != nil && x.Val != nil {
		return *x.Val
	}
	return 0
}

func (x *ScalarInt) GetSeverity() int32 {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return Default_ScalarInt_Severity
}

func (x *ScalarInt) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_ScalarInt_Status
}

func (x *ScalarInt) GetRepeatcount() uint32 {
	if x != nil && x.Repeatcount != nil {
		return *x.Repeatcount
	}
	return 0
}

func (x *ScalarInt) GetFieldvalues() []*FieldValue {
	if x != nil {
		return x.Fieldvalues
	}
	return nil
}

func (x *ScalarInt) GetFieldactualchange() bool {
	if x != nil && x.Fieldactualchange != nil {
		return *x.Fieldactualchange
	}
	return false
}

type ScalarEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secondsintoyear   *uint32       `protobuf:"varint,1,req,name=secondsintoyear" json:"secondsintoyear,omitempty"`
	Nano              *uint32       `protobuf:"varint,2,req,name=nano" json:"nano,omitempty"`
	Val               *int32        `protobuf:"zigzag32,3,req,name=val" json:"val,omitempty"`
	Severity          *int32        `protobuf:"varint,4,opt,name=severity,def=0" json:"severity,omitempty"`
	Status            *int32        `protobuf:"varint,5,opt,name=status,def=0" json:"status,omitempty"`
	Repeatcount       *uint32       `protobuf:"varint,6,opt,name=repeatcount" json:"repeatcount,omitempty"`
	Fieldvalues       []*FieldValue `protobuf:"bytes,7,rep,name=fieldvalues" json:"fieldvalues,omitempty"`
	Fieldactualchange *bool         `protobuf:"varint,8,opt,name=fieldactualchange" json:"fieldactualchange,omitempty"`
}

// Default values for ScalarEnum fields.
const (
	Default_ScalarEnum_Severity = int32(0)
	Default_ScalarEnum_Status   = int32(0)
)

func (x *ScalarEnum) Reset() {
	*x = ScalarEnum{}
	mi := &file_EPICSEvent_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScalarEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarEnum) ProtoMessage() {}

func (x *ScalarEnum) ProtoReflect() protoreflect.Message {
	mi := &file_EPICSEvent_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarEnum.ProtoReflect.Descriptor instead.
func (*ScalarEnum) Descriptor() ([]byte, []int) {
	return file_EPICSEvent_proto_rawDescGZIP(), []int{5}
}

func (x *ScalarEnum) GetSecondsintoyear() uint32 {
	if x != nil && x.Secondsintoyear != nil {
		return *x.Secondsintoyear
	}
	return 0
}

func (x *ScalarEnum) GetNano() uint32 {
	if x != nil && x.Nano != nil {
		return *x.Nano
	}
	return 0
}

func (x *ScalarEnum) GetVal() int32 {
	if x != nil && x.Val != nil {
		return *x.Val
	}
	return 0
}

func (x *ScalarEnum) GetSeverity() int32 {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return Default_ScalarEnum_Severity
}

func (x *ScalarEnum) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_ScalarEnum_Status
}

func (x *ScalarEnum) GetRepeatcount() uint32 {
	if x != nil && x.Repeatcount != nil {
		return *x.Repeatcount
	}
	return 0
}

func (x *ScalarEnum) GetFieldvalues() []*FieldValue {
	if x != nil {
		return x.Fieldvalues
	}
	return nil
}

func (x *ScalarEnum) GetFieldactualchange() bool {
	if x != nil && x.Fieldactualchange != nil {
		return *x.Fieldactualchange
	}
	return false
}

type ScalarFloat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secondsintoyear   *uint32       `protobuf:"varint,1,req,name=secondsintoyear" json:"secondsintoyear,omitempty"`
	Nano              *uint32       `protobuf:"varint,2,req,name=nano" json:"nano,omitempty"`
	Val               *float32      `protobuf:"fixed32,3,req,name=val" json:"val,omitempty"`
	Severity          *int32        `protobuf:"varint,4,opt,name=severity,def=0" json:"severity,omitempty"`
	Status            *int32        `protobuf:"varint,5,opt,name=status,def=0" json:"status,omitempty"`
	Repeatcount       *uint32       `protobuf:"varint,6,opt,name=repeatcount" json:"repeatcount,omitempty"`
	Fieldvalues       []*FieldValue `protobuf:"bytes,7,rep,name=fieldvalues" json:"fieldvalues,omitempty"`
	Fieldactualchange *bool         `protobuf:"varint,8,opt,name=fieldactualchange" json:"fieldactualchange,omitempty"`
}

// Default values for ScalarFloat fields.
const (
	Default_ScalarFloat_Severity = int32(0)
	Default_ScalarFloat_Status   = int32(0)
)

func (x *ScalarFloat) Reset() {
	*x = ScalarFloat{}
	mi := &file_EPICSEvent_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScalarFloat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarFloat) ProtoMessage() {}

func (x *ScalarFloat) ProtoReflect() protoreflect.Message {
	mi := &file_EPICSEvent_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarFloat.ProtoReflect.Descriptor instead.
func (*ScalarFloat) Descriptor() ([]byte, []int) {
	return file_EPICSEvent_proto_rawDescGZIP(), []int{6}
}

func (x *ScalarFloat) GetSecondsintoyear() uint32 {
	if x != nil && x.Secondsintoyear != nil {
		return *x.Secondsintoyear
	}
	return 0
}

func (x *ScalarFloat) GetNano() uint32 {
	if x != nil && x.Nano != nil {
		return *x.Nano
	}
	return 0
}

func (x *ScalarFloat) GetVal() float32 {
	if x != nil && x.Val != nil {
		return *x.Val
	}
	return 0
}

func (x *ScalarFloat) GetSeverity() int32 {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return Default_ScalarFloat_Severity
}

func (x *ScalarFloat) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_ScalarFloat_Status
}

func (x *ScalarFloat) GetRepeatcount() uint32 {
	if x != nil && x.Repeatcount != nil {
		return *x.Repeatcount
	}
	return 0
}

func (x *ScalarFloat) GetFieldvalues() []*FieldValue {
	if x != nil {
		return x.Fieldvalues
	}
	return nil
}

func (x *ScalarFloat) GetFieldactualchange() bool {
	if x != nil && x.Fieldactualchange != nil {
		return *x.Fieldactualchange
	}
	return false
}

type ScalarDouble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secondsintoyear   *uint32       `protobuf:"varint,1,req,name=secondsintoyear" json:"secondsintoyear,omitempty"`
	Nano              *uint32       `protobuf:"varint,2,req,name=nano" json:"nano,omitempty"`
	Val               *float64      `protobuf:"fixed64,3,req,name=val" json:"val,omitempty"`
	Severity          *int32        `protobuf:"varint,4,opt,name=severity,def=0" json:"severity,omitempty"`
	Status            *int32        `protobuf:"varint,5,opt,name=status,def=0" json:"status,omitempty"`
	Repeatcount       *uint32       `protobuf:"varint,6,opt,name=repeatcount" json:"repeatcount,omitempty"`
	Fieldvalues       []*FieldValue `protobuf:"bytes,7,rep,name=fieldvalues" json:"fieldvalues,omitempty"`
	Fieldactualchange *bool         `protobuf:"varint,8,opt,name=fieldactualchange" json:"fieldactualchange,omitempty"`
}

// Default values for ScalarDouble fields.
const (
	Default_ScalarDouble_Severity = int32(0)
	Default_ScalarDouble_Status   = int32(0)
)

func (x *ScalarDouble) Reset() {
	*x = ScalarDouble{}
	mi := &file_EPICSEvent_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScalarDouble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarDouble) ProtoMessage() {}

func (x *ScalarDouble) ProtoReflect() protoreflect.Message {
	mi := &file_EPICSEvent_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarDouble.ProtoReflect.Descriptor instead.
func (*ScalarDouble) Descriptor() ([]byte, []int) {
	return file_EPICSEvent_proto_rawDescGZIP(), []int{7}
}

func (x *ScalarDouble) GetSecondsintoyear() uint32 {
	if x != nil && x.Secondsintoyear != nil {
		return *x.Secondsintoyear
	}
	return 0
}

func (x *ScalarDouble) GetNano() uint32 {
	if x != nil && x.Nano != nil {
		return *x.Nano
	}
	return 0
}

func (x *ScalarDouble) GetVal() float64 {
	if x != nil && x.Val != nil {
		return *x.Val
	}
	return 0
}

func (x *ScalarDouble) GetSeverity() int32 {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return Default_ScalarDouble_Severity
}

func (x *ScalarDouble) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_ScalarDouble_Status
}

func (x *ScalarDouble) GetRepeatcount() uint32 {
	if x != nil && x.Repeatcount != nil {
		return *x.Repeatcount
	}
	return 0
}

func (x *ScalarDouble) GetFieldvalues() []*FieldValue {
	if x != nil {
		return x.Fieldvalues
	}
	return nil
}

func (x *ScalarDouble) GetFieldactualchange() bool {
	if x != nil && x.Fieldactualchange != nil {
		return *x.Fieldactualchange
	}
	return false
}

type VectorString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secondsintoyear *uint32 `protobuf:"varint,1,req,name=secondsintoyear" json:"secondsintoyear,omitempty"`
	Nano            *uint32 `protobuf:"varint,2,req,name=nano" json:"nano,omitempty"`
	// No packed here as this is available only for primitive fields.
	Val               []string      `protobuf:"bytes,3,rep,name=val" json:"val,omitempty"`
	Severity          *int32        `protobuf:"varint,4,opt,name=severity,def=0" json:"severity,omitempty"`
	Status            *int32        `protobuf:"varint,5,opt,name=status,def=0" json:"status,omitempty"`
	Repeatcount       *uint32       `protobuf:"varint,6,opt,name=repeatcount" json:"repeatcount,omitempty"`
	Fieldvalues       []*FieldValue `protobuf:"bytes,7,rep,name=fieldvalues" json:"fieldvalues,omitempty"`
	Fieldactualchange *bool         `protobuf:"varint,8,opt,name=fieldactualchange" json:"fieldactualchange,omitempty"`
}

// Default values for VectorString fields.
const (
	Default_VectorString_Severity = int32(0)
	Default_VectorString_Status   = int32(0)
)

func (x *VectorString) Reset() {
	*x = VectorString{}
	mi := &file_EPICSEvent_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorString) ProtoMessage() {}

func (x *VectorString) ProtoReflect() protoreflect.Message {
	mi := &file_EPICSEvent_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorString.ProtoReflect.Descriptor instead.
func (*VectorString) Descriptor() ([]byte, []int) {
	return file_EPICSEvent_proto_rawDescGZIP(), []int{8}
}

func (x *VectorString) GetSecondsintoyear() uint32 {
	if x != nil && x.Secondsintoyear != nil {
		return *x.Secondsintoyear
	}
	return 0
}

func (x *VectorString) GetNano() uint32 {
	if x != nil && x.Nano != nil {
		return *x.Nano
	}
	return 0
}

func (x *VectorString) GetVal() []string {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *VectorString) GetSeverity() int32 {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return Default_VectorString_Severity
}

func (x *VectorString) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_VectorString_Status
}

func (x *VectorString) GetRepeatcount() uint32 {
	if x != nil && x.Repeatcount != nil {
		return *x.Repeatcount
	}
	return 0
}

func (x *VectorString) GetFieldvalues() []*FieldValue {
	if x != nil {
		return x.Fieldvalues
	}
	return nil
}

func (x *VectorString) GetFieldactualchange() bool {
	if x != nil && x.Fieldactualchange != nil {
		return *x.Fieldactualchange
	}
	return false
}

// VectorChar is the same as ScalarChar as we use ByteString for both
type VectorChar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secondsintoyear   *uint32       `protobuf:"varint,1,req,name=secondsintoyear" json:"secondsintoyear,omitempty"`
	Nano              *uint32       `protobuf:"varint,2,req,name=nano" json:"nano,omitempty"`
	Val               []byte        `protobuf:"bytes,3,req,name=val" json:"val,omitempty"`
	Severity          *int32        `protobuf:"varint,4,opt,name=severity,def=0" json:"severity,omitempty"`
	Status            *int32        `protobuf:"varint,5,opt,name=status,def=0" json:"status,omitempty"`
	Repeatcount       *uint32       `protobuf:"varint,6,opt,name=repeatcount" json:"repeatcount,omitempty"`
	Fieldvalues       []*FieldValue `protobuf:"bytes,7,rep,name=fieldvalues" json:"fieldvalues,omitempty"`
	Fieldactualchange *bool         `protobuf:"varint,8,opt,name=fieldactualchange" json:"fieldactualchange,omitempty"`
}

// Default values for VectorChar fields.
const (
	Default_VectorChar_Severity = int32(0)
	Default_VectorChar_Status   = int32(0)
)

func (x *VectorChar) Reset() {
	*x = VectorChar{}
	mi := &file_EPICSEvent_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorChar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorChar) ProtoMessage() {}

func (x *VectorChar) ProtoReflect() protoreflect.Message {
	mi := &file_EPICSEvent_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorChar.ProtoReflect.Descriptor instead.
func (*VectorChar) Descriptor() ([]byte, []int) {
	return file_EPICSEvent_proto_rawDescGZIP(), []int{9}
}

func (x *VectorChar) GetSecondsintoyear() uint32 {
	if x != nil && x.Secondsintoyear != nil {
		return *x.Secondsintoyear
	}
	return 0
}

func (x *VectorChar) GetNano() uint32 {
	if x != nil && x.Nano != nil {
		return *x.Nano
	}
	return 0
}

func (x *VectorChar) GetVal() []byte {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *VectorChar) GetSeverity() int32 {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return Default_VectorChar_Severity
}

func (x *VectorChar) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_VectorChar_Status
}

func (x *VectorChar) GetRepeatcount() uint32 {
	if x != nil && x.Repeatcount != nil {
		return *x.Repeatcount
	}
	return 0
}

func (x *VectorChar) GetFieldvalues() []*FieldValue {
	if x != nil {
		return x.Fieldvalues
	}
	return nil
}

func (x *VectorChar) GetFieldactualchange() bool {
	if x != nil && x.Fieldactualchange != nil {
		return *x.Fieldactualchange
	}
	return false
}

type VectorShort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secondsintoyear   *uint32       `protobuf:"varint,1,req,name=secondsintoyear" json:"secondsintoyear,omitempty"`
	Nano              *uint32       `protobuf:"varint,2,req,name=nano" json:"nano,omitempty"`
	Val               []int32       `protobuf:"zigzag32,3,rep,packed,name=val" json:"val,omitempty"`
	Severity          *int32        `protobuf:"varint,4,opt,name=severity,def=0" json:"severity,omitempty"`
	Status            *int32        `protobuf:"varint,5,opt,name=status,def=0" json:"status,omitempty"`
	Repeatcount       *uint32       `protobuf:"varint,6,opt,name=repeatcount" json:"repeatcount,omitempty"`
	Fieldvalues       []*FieldValue `protobuf:"bytes,7,rep,name=fieldvalues" json:"fieldvalues,omitempty"`
	Fieldactualchange *bool         `protobuf:"varint,8,opt,name=fieldactualchange" json:"fieldactualchange,omitempty"`
}

// Default values for VectorShort fields.
const (
	Default_VectorShort_Severity = int32(0)
	Default_VectorShort_Status   = int32(0)
)

func (x *VectorShort) Reset() {
	*x = VectorShort{}
	mi := &file_EPICSEvent_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorShort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorShort) ProtoMessage() {}

func (x *VectorShort) ProtoReflect() protoreflect.Message {
	mi := &file_EPICSEvent_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorShort.ProtoReflect.Descriptor instead.
func (*VectorShort) Descriptor() ([]byte, []int) {
	return file_EPICSEvent_proto_rawDescGZIP(), []int{10}
}

func (x *VectorShort) GetSecondsintoyear() uint32 {
	if x != nil && x.Secondsintoyear != nil {
		return *x.Secondsintoyear
	}
	return 0
}

func (x *VectorShort) GetNano() uint32 {
	if x != nil && x.Nano != nil {
		return *x.Nano
	}
	return 0
}

func (x *VectorShort) GetVal() []int32 {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *VectorShort) GetSeverity() int32 {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return Default_VectorShort_Severity
}

func (x *VectorShort) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_VectorShort_Status
}

func (x *VectorShort) GetRepeatcount() uint32 {
	if x != nil && x.Repeatcount != nil {
		return *x.Repeatcount
	}
	return 0
}

func (x *VectorShort) GetFieldvalues() []*FieldValue {
	if x != nil {
		return x.Fieldvalues
	}
	return nil
}

func (x *VectorShort) GetFieldactualchange() bool {
	if x != nil && x.Fieldactualchange != nil {
		return *x.Fieldactualchange
	}
	return false
}

type VectorInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secondsintoyear   *uint32       `protobuf:"varint,1,req,name=secondsintoyear" json:"secondsintoyear,omitempty"`
	Nano              *uint32       `protobuf:"varint,2,req,name=nano" json:"nano,omitempty"`
	Val               []int32       `protobuf:"fixed32,3,rep,packed,name=val" json:"val,omitempty"`
	Severity          *int32        `protobuf:"varint,4,opt,name=severity,def=0" json:"severity,omitempty"`
	Status            *int32        `protobuf:"varint,5,opt,name=status,def=0" json:"status,omitempty"`
	Repeatcount       *uint32       `protobuf:"varint,6,opt,name=repeatcount" json:"repeatcount,omitempty"`
	Fieldvalues       []*FieldValue `protobuf:"bytes,7,rep,name=fieldvalues" json:"fieldvalues,omitempty"`
	Fieldactualchange *bool         `protobuf:"varint,8,opt,name=fieldactualchange" json:"fieldactualchange,omitempty"`
}

// Default values for VectorInt fields.
const (
	Default_VectorInt_Severity = int32(0)
	Default_VectorInt_Status   = int32(0)
)

func (x *VectorInt) Reset() {
	*x = VectorInt{}
	mi := &file_EPICSEvent_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorInt) ProtoMessage() {}

func (x *VectorInt) ProtoReflect() protoreflect.Message {
	mi := &file_EPICSEvent_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorInt.ProtoReflect.Descriptor instead.
func (*VectorInt) Descriptor() ([]byte, []int) {
	return file_EPICSEvent_proto_rawDescGZIP(), []int{11}
}

func (x *VectorInt) GetSecondsintoyear() uint32 {
	if x != nil && x.Secondsintoyear != nil {
		return *x.Secondsintoyear
	}
	return 0
}

func (x *VectorInt) GetNano() uint32 {
	if x != nil && x.Nano != nil {
		return *x.Nano
	}
	return 0
}

func (x *VectorInt) GetVal() []int32 {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *VectorInt) GetSeverity() int32 {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return Default_VectorInt_Severity
}

func (x *VectorInt) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_VectorInt_Status
}

func (x *VectorInt) GetRepeatcount() uint32 {
	if x != nil && x.Repeatcount != nil {
		return *x.Repeatcount
	}
	return 0
}

func (x *VectorInt) GetFieldvalues() []*FieldValue {
	if x != nil {
		return x.Fieldvalues
	}
	return nil
}

func (x *VectorInt) GetFieldactualchange() bool {
	if x != nil && x.Fieldactualchange != nil {
		return *x.Fieldactualchange
	}
	return false
}

type VectorEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secondsintoyear   *uint32       `protobuf:"varint,1,req,name=secondsintoyear" json:"secondsintoyear,omitempty"`
	Nano              *uint32       `protobuf:"varint,2,req,name=nano" json:"nano,omitempty"`
	Val               []int32       `protobuf:"zigzag32,3,rep,packed,name=val" json:"val,omitempty"`
	Severity          *int32        `protobuf:"varint,4,opt,name=severity,def=0" json:"severity,omitempty"`
	Status            *int32        `protobuf:"varint,5,opt,name=status,def=0" json:"status,omitempty"`
	Repeatcount       *uint32       `protobuf:"varint,6,opt,name=repeatcount" json:"repeatcount,omitempty"`
	Fieldvalues       []*FieldValue `protobuf:"bytes,7,rep,name=fieldvalues" json:"fieldvalues,omitempty"`
	Fieldactualchange *bool         `protobuf:"varint,8,opt,name=fieldactualchange" json:"fieldactualchange,omitempty"`
}

// Default values for VectorEnum fields.
const (
	Default_VectorEnum_Severity = int32(0)
	Default_VectorEnum_Status   = int32(0)
)

func (x *VectorEnum) Reset() {
	*x = VectorEnum{}
	mi := &file_EPICSEvent_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorEnum) ProtoMessage() {}

func (x *VectorEnum) ProtoReflect() protoreflect.Message {
	mi := &file_EPICSEvent_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorEnum.ProtoReflect.Descriptor instead.
func (*VectorEnum) Descriptor() ([]byte, []int) {
	return file_EPICSEvent_proto_rawDescGZIP(), []int{12}
}

func (x *VectorEnum) GetSecondsintoyear() uint32 {
	if x != nil && x.Secondsintoyear != nil {
		return *x.Secondsintoyear
	}
	return 0
}

func (x *VectorEnum) GetNano() uint32 {
	if x != nil && x.Nano != nil {
		return *x.Nano
	}
	return 0
}

func (x *VectorEnum) GetVal() []int32 {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *VectorEnum) GetSeverity() int32 {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return Default_VectorEnum_Severity
}

func (x *VectorEnum) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_VectorEnum_Status
}

func (x *VectorEnum) GetRepeatcount() uint32 {
	if x != nil && x.Repeatcount != nil {
		return *x.Repeatcount
	}
	return 0
}

func (x *VectorEnum) GetFieldvalues() []*FieldValue {
	if x != nil {
		return x.Fieldvalues
	}
	return nil
}

func (x *VectorEnum) GetFieldactualchange() bool {
	if x != nil && x.Fieldactualchange != nil {
		return *x.Fieldactualchange
	}
	return false
}

type VectorFloat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secondsintoyear   *uint32       `protobuf:"varint,1,req,name=secondsintoyear" json:"secondsintoyear,omitempty"`
	Nano              *uint32       `protobuf:"varint,2,req,name=nano" json:"nano,omitempty"`
	Val               []float32     `protobuf:"fixed32,3,rep,packed,name=val" json:"val,omitempty"`
	Severity          *int32        `protobuf:"varint,4,opt,name=severity,def=0" json:"severity,omitempty"`
	Status            *int32        `protobuf:"varint,5,opt,name=status,def=0" json:"status,omitempty"`
	Repeatcount       *uint32       `protobuf:"varint,6,opt,name=repeatcount" json:"repeatcount,omitempty"`
	Fieldvalues       []*FieldValue `protobuf:"bytes,7,rep,name=fieldvalues" json:"fieldvalues,omitempty"`
	Fieldactualchange *bool         `protobuf:"varint,8,opt,name=fieldactualchange" json:"fieldactualchange,omitempty"`
}

// Default values for VectorFloat fields.
const (
	Default_VectorFloat_Severity = int32(0)
	Default_VectorFloat_Status   = int32(0)
)

func (x *VectorFloat) Reset() {
	*x = VectorFloat{}
	mi := &file_EPICSEvent_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorFloat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorFloat) ProtoMessage() {}

func (x *VectorFloat) ProtoReflect() protoreflect.Message {
	mi := &file_EPICSEvent_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorFloat.ProtoReflect.Descriptor instead.
func (*VectorFloat) Descriptor() ([]byte, []int) {
	return file_EPICSEvent_proto_rawDescGZIP(), []int{13}
}

func (x *VectorFloat) GetSecondsintoyear() uint32 {
	if x != nil && x.Secondsintoyear != nil {
		return *x.Secondsintoyear
	}
	return 0
}

func (x *VectorFloat) GetNano() uint32 {
	if x != nil && x.Nano != nil {
		return *x.Nano
	}
	return 0
}

func (x *VectorFloat) GetVal() []float32 {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *VectorFloat) GetSeverity() int32 {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return Default_VectorFloat_Severity
}

func (x *VectorFloat) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_VectorFloat_Status
}

func (x *VectorFloat) GetRepeatcount() uint32 {
	if x != nil && x.Repeatcount != nil {
		return *x.Repeatcount
	}
	return 0
}

func (x *VectorFloat) GetFieldvalues() []*FieldValue {
	if x != nil {
		return x.Fieldvalues
	}
	return nil
}

func (x *VectorFloat) GetFieldactualchange() bool {
	if x != nil && x.Fieldactualchange != nil {
		return *x.Fieldactualchange
	}
	return false
}

type VectorDouble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secondsintoyear   *uint32       `protobuf:"varint,1,req,name=secondsintoyear" json:"secondsintoyear,omitempty"`
	Nano              *uint32       `protobuf:"varint,2,req,name=nano" json:"nano,omitempty"`
	Val               []float64     `protobuf:"fixed64,3,rep,packed,name=val" json:"val,omitempty"`
	Severity          *int32        `protobuf:"varint,4,opt,name=severity,def=0" json:"severity,omitempty"`
	Status            *int32        `protobuf:"varint,5,opt,name=status,def=0" json:"status,omitempty"`
	Repeatcount       *uint32       `protobuf:"varint,6,opt,name=repeatcount" json:"repeatcount,omitempty"`
	Fieldvalues       []*FieldValue `protobuf:"bytes,7,rep,name=fieldvalues" json:"fieldvalues,omitempty"`
	Fieldactualchange *bool         `protobuf:"varint,8,opt,name=fieldactualchange" json:"fieldactualchange,omitempty"`
}

// Default values for VectorDouble fields.
const (
	Default_VectorDouble_Severity = int32(0)
	Default_VectorDouble_Status   = int32(0)
)

func (x *VectorDouble) Reset() {
	*x = VectorDouble{}
	mi := &file_EPICSEvent_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorDouble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorDouble) ProtoMessage() {}

func (x *VectorDouble) ProtoReflect() protoreflect.Message {
	mi := &file_EPICSEvent_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorDouble.ProtoReflect.Descriptor instead.
func (*VectorDouble) Descriptor() ([]byte, []int) {
	return file_EPICSEvent_proto_rawDescGZIP(), []int{14}
}

func (x *VectorDouble) GetSecondsintoyear() uint32 {
	if x != nil && x.Secondsintoyear != nil {
		return *x.Secondsintoyear
	}
	return 0
}

func (x *VectorDouble) GetNano() uint32 {
	if x != nil && x.Nano != nil {
		return *x.Nano
	}
	return 0
}

func (x *VectorDouble) GetVal() []float64 {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *VectorDouble) GetSeverity() int32 {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return Default_VectorDouble_Severity
}

func (x *VectorDouble) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_VectorDouble_Status
}

func (x *VectorDouble) GetRepeatcount() uint32 {
	if x != nil && x.Repeatcount != nil {
		return *x.Repeatcount
	}
	return 0
}

func (x *VectorDouble) GetFieldvalues() []*FieldValue {
	if x != nil {
		return x.Fieldvalues
	}
	return nil
}

func (x *VectorDouble) GetFieldactualchange() bool {
	if x != nil && x.Fieldactualchange != nil {
		return *x.Fieldactualchange
	}
	return false
}

// A generic v4 container; we simply store the bytes as obtained from EPICS v4 as the val.
type V4GenericBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secondsintoyear   *uint32       `protobuf:"varint,1,req,name=secondsintoyear" json:"secondsintoyear,omitempty"`
	Nano              *uint32       `protobuf:"varint,2,req,name=nano" json:"nano,omitempty"`
	Val               []byte        `protobuf:"bytes,3,req,name=val" json:"val,omitempty"`
	Severity          *int32        `protobuf:"varint,4,opt,name=severity,def=0" json:"severity,omitempty"`
	Status            *int32        `protobuf:"varint,5,opt,name=status,def=0" json:"status,omitempty"`
	Repeatcount       *uint32       `protobuf:"varint,6,opt,name=repeatcount" json:"repeatcount,omitempty"`
	Fieldvalues       []*FieldValue `protobuf:"bytes,7,rep,name=fieldvalues" json:"fieldvalues,omitempty"`
	Fieldactualchange *bool         `protobuf:"varint,8,opt,name=fieldactualchange" json:"fieldactualchange,omitempty"`
	// EPICS V4 user tag
	UserTag *uint32 `protobuf:"varint,9,opt,name=userTag" json:"userTag,omitempty"`
}

// Default values for V4GenericBytes fields.
const (
	Default_V4GenericBytes_Severity = int32(0)
	Default_V4GenericBytes_Status   = int32(0)
)

func (x *V4GenericBytes) Reset() {
	*x = V4GenericBytes{}
	mi := &file_EPICSEvent_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *V4GenericBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V4GenericBytes) ProtoMessage() {}

func (x *V4GenericBytes) ProtoReflect() protoreflect.Message {
	mi := &file_EPICSEvent_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V4GenericBytes.ProtoReflect.Descriptor instead.
func (*V4GenericBytes) Descriptor() ([]byte, []int) {
	return file_EPICSEvent_proto_rawDescGZIP(), []int{15}
}

func (x *V4GenericBytes) GetSecondsintoyear() uint32 {
	if x != nil && x.Secondsintoyear != nil {
		return *x.Secondsintoyear
	}
	return 0
}

func (x *V4GenericBytes) GetNano() uint32 {
	if x != nil && x.Nano != nil {
		return *x.Nano
	}
	return 0
}

func (x *V4GenericBytes) GetVal() []byte {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *V4GenericBytes) GetSeverity() int32 {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return Default_V4GenericBytes_Severity
}

func (x *V4GenericBytes) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_V4GenericBytes_Status
}

func (x *V4GenericBytes) GetRepeatcount() uint32 {
	if x != nil && x.Repeatcount != nil {
		return *x.Repeatcount
	}
	return 0
}

func (x *V4GenericBytes) GetFieldvalues() []*FieldValue {
	if x != nil {
		return x.Fieldvalues
	}
	return nil
}

func (x *V4GenericBytes) GetFieldactualchange() bool {
	if x != nil && x.Fieldactualchange != nil {
		return *x.Fieldactualchange
	}
	return false
}

func (x *V4GenericBytes) GetUserTag() uint32 {
	if x != nil && x.UserTag != nil {
		return *x.UserTag
	}
	return 0
}

// A payload info is the first line in a chunk of data sent back to the client.
// It tells you how to unmarshall, the pvname and the year for the data
// It also has a lot of optional fields
type PayloadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         *PayloadType `protobuf:"varint,1,req,name=type,enum=archiverappliance.PayloadType" json:"type,omitempty"`
	Pvname       *string      `protobuf:"bytes,2,req,name=pvname" json:"pvname,omitempty"`
	Year         *int32       `protobuf:"varint,3,req,name=year" json:"year,omitempty"`
	ElementCount *int32       `protobuf:"varint,4,opt,name=elementCount" json:"elementCount,omitempty"`
	// Items from 5 to 14 are no longer to be used.
	// Stick these into the headers using the field names
	// For example, units comes in as EGU in the headers.
	Unused00 *float64 `protobuf:"fixed64,5,opt,name=unused00" json:"unused00,omitempty"`
	Unused01 *float64 `protobuf:"fixed64,6,opt,name=unused01" json:"unused01,omitempty"`
	Unused02 *float64 `protobuf:"fixed64,7,opt,name=unused02" json:"unused02,omitempty"`
	Unused03 *float64 `protobuf:"fixed64,8,opt,name=unused03" json:"unused03,omitempty"`
	Unused04 *float64 `protobuf:"fixed64,9,opt,name=unused04" json:"unused04,omitempty"`
	Unused05 *float64 `protobuf:"fixed64,10,opt,name=unused05" json:"unused05,omitempty"`
	Unused06 *float64 `protobuf:"fixed64,11,opt,name=unused06" json:"unused06,omitempty"`
	Unused07 *float64 `protobuf:"fixed64,12,opt,name=unused07" json:"unused07,omitempty"`
	Unused08 *float64 `protobuf:"fixed64,13,opt,name=unused08" json:"unused08,omitempty"`
	Unused09 *string  `protobuf:"bytes,14,opt,name=unused09" json:"unused09,omitempty"`
	// End of unused elements
	Headers []*FieldValue `protobuf:"bytes,15,rep,name=headers" json:"headers,omitempty"`
}

func (x *PayloadInfo) Reset() {
	*x = PayloadInfo{}
	mi := &file_EPICSEvent_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayloadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadInfo) ProtoMessage() {}

func (x *PayloadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_EPICSEvent_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadInfo.ProtoReflect.Descriptor instead.
func (*PayloadInfo) Descriptor() ([]byte, []int) {
	return file_EPICSEvent_proto_rawDescGZIP(), []int{16}
}

func (x *PayloadInfo) GetType() PayloadType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return PayloadType_SCALAR_STRING
}

func (x *PayloadInfo) GetPvname() string {
	if x != nil && x.Pvname != nil {
		return *x.Pvname
	}
	return ""
}

func (x *PayloadInfo) GetYear() int32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *PayloadInfo) GetElementCount() int32 {
	if x != nil && x.ElementCount != nil {
		return *x.ElementCount
	}
	return 0
}

func (x *PayloadInfo) GetUnused00() float64 {
	if x != nil && x.Unused00 != nil {
		return *x.Unused00
	}
	return 0
}

func (x *PayloadInfo) GetUnused01() float64 {
	if x != nil && x.Unused01 != nil {
		return *x.Unused01
	}
	return 0
}

func (x *PayloadInfo) GetUnused02() float64 {
	if x != nil && x.Unused02 != nil {
		return *x.Unused02
	}
	return 0
}

func (x *PayloadInfo) GetUnused03() float64 {
	if x != nil && x.Unused03 != nil {
		return *x.Unused03
	}
	return 0
}

func (x *PayloadInfo) GetUnused04() float64 {
	if x != nil && x.Unused04 != nil {
		return *x.Unused04
	}
	return 0
}

func (x *PayloadInfo) GetUnused05() float64 {
	if x != nil && x.Unused05 != nil {
		return *x.Unused05
	}
	return 0
}

func (x *PayloadInfo) GetUnused06() float64 {
	if x != nil && x.Unused06 != nil {
		return *x.Unused06
	}
	return 0
}

func (x *PayloadInfo) GetUnused07() float64 {
	if x != nil && x.Unused07 != nil {
		return *x.Unused07
	}
	return 0
}

func (x *PayloadInfo) GetUnused08() float64 {
	if x != nil && x.Unused08 != nil {
		return *x.Unused08
	}
	return 0
}

func (x *PayloadInfo) GetUnused09() string {
	if x != nil && x.Unused09 != nil {
		return *x.Unused09
	}
	return ""
}

func (x *PayloadInfo) GetHeaders() []*FieldValue {
	if x != nil {
		return x.Headers
	}
	return nil
}

var File_EPICSEvent_proto protoreflect.FileDescriptor

var file_EPICSEvent_proto_rawDesc = []byte{
	0x0a, 0x10, 0x45, 0x50, 0x49, 0x43, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x11, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x72, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x32, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0xa9, 0x02, 0x0a, 0x0c, 0x53, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69, 0x6e, 0x74, 0x6f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69, 0x6e, 0x74, 0x6f,
	0x79, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x04, 0x6e, 0x61, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x72, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x0a, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x42, 0x79, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69,
	0x6e, 0x74, 0x6f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69, 0x6e, 0x74, 0x6f, 0x79, 0x65, 0x61, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x61,
	0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x03, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x72,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0xa8, 0x02, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69, 0x6e, 0x74, 0x6f, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x69, 0x6e, 0x74, 0x6f, 0x79, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6e,
	0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x61, 0x6e, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x11, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12,
	0x1d, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01,
	0x30, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x72, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xa6, 0x02, 0x0a, 0x09, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x69, 0x6e, 0x74, 0x6f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69, 0x6e, 0x74, 0x6f, 0x79, 0x65,
	0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x04, 0x6e, 0x61, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0f, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x72, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x0a, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69, 0x6e, 0x74,
	0x6f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x69, 0x6e, 0x74, 0x6f, 0x79, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x61, 0x6e, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x11, 0x52, 0x03, 0x76,
	0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f,
	0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x72, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xa8, 0x02,
	0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69, 0x6e, 0x74, 0x6f, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69,
	0x6e, 0x74, 0x6f, 0x79, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x61, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x76,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x02, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a,
	0x01, 0x30, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x72, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xa9, 0x02, 0x0a, 0x0c, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x69, 0x6e, 0x74, 0x6f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69, 0x6e, 0x74, 0x6f, 0x79,
	0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x04, 0x6e, 0x61, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x01, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x72, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0xa9, 0x02, 0x0a, 0x0c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x69, 0x6e, 0x74, 0x6f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69, 0x6e, 0x74, 0x6f, 0x79, 0x65, 0x61, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x6e,
	0x61, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x72, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x22, 0xa7, 0x02, 0x0a, 0x0a, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x72, 0x12,
	0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69, 0x6e, 0x74, 0x6f, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x69, 0x6e, 0x74, 0x6f, 0x79, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6e,
	0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x61, 0x6e, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12,
	0x1d, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01,
	0x30, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x72, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x0b, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69, 0x6e, 0x74, 0x6f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69, 0x6e, 0x74, 0x6f,
	0x79, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x04, 0x6e, 0x61, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x11, 0x42, 0x02, 0x10, 0x01, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x1d,
	0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x72, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xaa, 0x02, 0x0a, 0x09, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x69, 0x6e, 0x74, 0x6f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69, 0x6e, 0x74, 0x6f, 0x79, 0x65, 0x61,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x04, 0x6e, 0x61, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0f, 0x42, 0x02, 0x10, 0x01, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30,
	0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x72, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x0a, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x69, 0x6e, 0x74, 0x6f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69, 0x6e, 0x74, 0x6f, 0x79, 0x65, 0x61, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x6e,
	0x61, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x11,
	0x42, 0x02, 0x10, 0x01, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x72, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x0b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69,
	0x6e, 0x74, 0x6f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69, 0x6e, 0x74, 0x6f, 0x79, 0x65, 0x61, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x61,
	0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x42,
	0x02, 0x10, 0x01, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x72, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0xad, 0x02, 0x0a, 0x0c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69,
	0x6e, 0x74, 0x6f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69, 0x6e, 0x74, 0x6f, 0x79, 0x65, 0x61, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x61,
	0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x42,
	0x02, 0x10, 0x01, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x72, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0xc5, 0x02, 0x0a, 0x0e, 0x56, 0x34, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x69, 0x6e, 0x74, 0x6f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69, 0x6e, 0x74, 0x6f, 0x79, 0x65, 0x61, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04,
	0x6e, 0x61, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x72, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x22, 0xe2, 0x03, 0x0a, 0x0b,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x72, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x76, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x76, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x30, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x30, 0x30, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x6e, 0x75, 0x73, 0x65, 0x64, 0x30, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75,
	0x6e, 0x75, 0x73, 0x65, 0x64, 0x30, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x75, 0x73, 0x65,
	0x64, 0x30, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x6e, 0x75, 0x73, 0x65,
	0x64, 0x30, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x30, 0x33, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x30, 0x33, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x30, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x30, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x6e, 0x75, 0x73, 0x65, 0x64, 0x30, 0x35, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75,
	0x6e, 0x75, 0x73, 0x65, 0x64, 0x30, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x75, 0x73, 0x65,
	0x64, 0x30, 0x36, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x6e, 0x75, 0x73, 0x65,
	0x64, 0x30, 0x36, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x30, 0x37, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x30, 0x37, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x30, 0x38, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x30, 0x38, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x6e, 0x75, 0x73, 0x65, 0x64, 0x30, 0x39, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x6e, 0x75, 0x73, 0x65, 0x64, 0x30, 0x39, 0x12, 0x37, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x72, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x2a, 0xa9, 0x02, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e,
	0x47, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x53, 0x48,
	0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f,
	0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x43, 0x41, 0x4c, 0x41,
	0x52, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x43, 0x41, 0x4c,
	0x41, 0x52, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x41,
	0x4c, 0x41, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x43, 0x41,
	0x4c, 0x41, 0x52, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f,
	0x57, 0x41, 0x56, 0x45, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x07, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x41, 0x56, 0x45, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x48,
	0x4f, 0x52, 0x54, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x41, 0x56, 0x45, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x41, 0x56,
	0x45, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d,
	0x57, 0x41, 0x56, 0x45, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x10, 0x0b, 0x12,
	0x10, 0x0a, 0x0c, 0x57, 0x41, 0x56, 0x45, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x10,
	0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x41, 0x56, 0x45, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x44, 0x4f,
	0x55, 0x42, 0x4c, 0x45, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x34, 0x5f, 0x47, 0x45, 0x4e,
	0x45, 0x52, 0x49, 0x43, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x0e, 0x42, 0x4b, 0x5a, 0x49,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x61, 0x73, 0x61, 0x6b,
	0x69, 0x37, 0x37, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x72, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x72, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x62,
}

var (
	file_EPICSEvent_proto_rawDescOnce sync.Once
	file_EPICSEvent_proto_rawDescData = file_EPICSEvent_proto_rawDesc
)

func file_EPICSEvent_proto_rawDescGZIP() []byte {
	file_EPICSEvent_proto_rawDescOnce.Do(func() {
		file_EPICSEvent_proto_rawDescData = protoimpl.X.CompressGZIP(file_EPICSEvent_proto_rawDescData)
	})
	return file_EPICSEvent_proto_rawDescData
}

var file_EPICSEvent_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_EPICSEvent_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_EPICSEvent_proto_goTypes = []any{
	(PayloadType)(0),       // 0: archiverappliance.PayloadType
	(*FieldValue)(nil),     // 1: archiverappliance.FieldValue
	(*ScalarString)(nil),   // 2: archiverappliance.ScalarString
	(*ScalarByte)(nil),     // 3: archiverappliance.ScalarByte
	(*ScalarShort)(nil),    // 4: archiverappliance.ScalarShort
	(*ScalarInt)(nil),      // 5: archiverappliance.ScalarInt
	(*ScalarEnum)(nil),     // 6: archiverappliance.ScalarEnum
	(*ScalarFloat)(nil),    // 7: archiverappliance.ScalarFloat
	(*ScalarDouble)(nil),   // 8: archiverappliance.ScalarDouble
	(*VectorString)(nil),   // 9: archiverappliance.VectorString
	(*VectorChar)(nil),     // 10: archiverappliance.VectorChar
	(*VectorShort)(nil),    // 11: archiverappliance.VectorShort
	(*VectorInt)(nil),      // 12: archiverappliance.VectorInt
	(*VectorEnum)(nil),     // 13: archiverappliance.VectorEnum
	(*VectorFloat)(nil),    // 14: archiverappliance.VectorFloat
	(*VectorDouble)(nil),   // 15: archiverappliance.VectorDouble
	(*V4GenericBytes)(nil), // 16: archiverappliance.V4GenericBytes
	(*PayloadInfo)(nil),    // 17: archiverappliance.PayloadInfo
}
var file_EPICSEvent_proto_depIdxs = []int32{
	1,  // 0: archiverappliance.ScalarString.fieldvalues:type_name -> archiverappliance.FieldValue
	1,  // 1: archiverappliance.ScalarByte.fieldvalues:type_name -> archiverappliance.FieldValue
	1,  // 2: archiverappliance.ScalarShort.fieldvalues:type_name -> archiverappliance.FieldValue
	1,  // 3: archiverappliance.ScalarInt.fieldvalues:type_name -> archiverappliance.FieldValue
	1,  // 4: archiverappliance.ScalarEnum.fieldvalues:type_name -> archiverappliance.FieldValue
	1,  // 5: archiverappliance.ScalarFloat.fieldvalues:type_name -> archiverappliance.FieldValue
	1,  // 6: archiverappliance.ScalarDouble.fieldvalues:type_name -> archiverappliance.FieldValue
	1,  // 7: archiverappliance.VectorString.fieldvalues:type_name -> archiverappliance.FieldValue
	1,  // 8: archiverappliance.VectorChar.fieldvalues:type_name -> archiverappliance.FieldValue
	1,  // 9: archiverappliance.VectorShort.fieldvalues:type_name -> archiverappliance.FieldValue
	1,  // 10: archiverappliance.VectorInt.fieldvalues:type_name -> archiverappliance.FieldValue
	1,  // 11: archiverappliance.VectorEnum.fieldvalues:type_name -> archiverappliance.FieldValue
	1,  // 12: archiverappliance.VectorFloat.fieldvalues:type_name -> archiverappliance.FieldValue
	1,  // 13: archiverappliance.VectorDouble.fieldvalues:type_name -> archiverappliance.FieldValue
	1,  // 14: archiverappliance.V4GenericBytes.fieldvalues:type_name -> archiverappliance.FieldValue
	0,  // 15: archiverappliance.PayloadInfo.type:type_name -> archiverappliance.PayloadType
	1,  // 16: archiverappliance.PayloadInfo.headers:type_name -> archiverappliance.FieldValue
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_EPICSEvent_proto_init() }
func file_EPICSEvent_proto_init() {
	if File_EPICSEvent_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_EPICSEvent_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_EPICSEvent_proto_goTypes,
		DependencyIndexes: file_EPICSEvent_proto_depIdxs,
		EnumInfos:         file_EPICSEvent_proto_enumTypes,
		MessageInfos:      file_EPICSEvent_proto_msgTypes,
	}.Build()
	File_EPICSEvent_proto = out.File
	file_EPICSEvent_proto_rawDesc = nil
	file_EPICSEvent_proto_goTypes = nil
	file_EPICSEvent_proto_depIdxs = nil
}
