// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render Editor with basic options should render normally 1`] = `
<Fragment>
  <div
    className="gf-form-inline"
  >
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Set PV name to be visualized. It is allowed to set multiple PVs by using Regular Expressoins alternation pattern (e.g. 
          <code>
            (PV:1|PV:2)
          </code>
          )
        </p>
      }
      width={6}
    >
      PV
    </FormLabel>
    <div
      className="max-width-30 gf-form-spacing"
    >
      <Autosuggest
        alwaysRenderSuggestions={false}
        containerProps={Object {}}
        focusInputOnSuggestionClick={true}
        getSuggestionValue={[Function]}
        highlightFirstSuggestion={false}
        id="1"
        inputProps={
          Object {
            "className": "gf-form-input",
            "onBlur": [MockFunction],
            "onChange": [Function],
            "onKeyDown": [Function],
            "placeholder": "PV name",
            "spellCheck": false,
            "style": Object {},
            "value": "pvname",
          }
        }
        multiSection={false}
        onSuggestionSelected={[Function]}
        onSuggestionsClearRequested={[Function]}
        onSuggestionsFetchRequested={[Function]}
        renderSuggestion={[Function]}
        renderSuggestionsContainer={[Function]}
        shouldKeepSuggestionsOnSelect={[Function]}
        shouldRenderSuggestions={[Function]}
        suggestions={Array []}
        theme={
          Object {
            "container": "react-autosuggest__container",
            "containerOpen": "react-autosuggest__container--open",
            "input": "react-autosuggest__input",
            "inputFocused": "react-autosuggest__input--focused",
            "inputOpen": "react-autosuggest__input--open",
            "sectionContainer": "react-autosuggest__section-container",
            "sectionContainerFirst": "react-autosuggest__section-container--first",
            "sectionTitle": "react-autosuggest__section-title",
            "suggestion": "react-autosuggest__suggestion",
            "suggestionFirst": "react-autosuggest__suggestion--first",
            "suggestionHighlighted": "react-autosuggest__suggestion--highlighted",
            "suggestionsContainer": "react-autosuggest__suggestions-container",
            "suggestionsContainerOpen": "react-autosuggest__suggestions-container--open",
            "suggestionsList": "react-autosuggest__suggestions-list",
          }
        }
      />
    </div>
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Enable/Disable Regex mode. You can select multiple PVs using Regular Expressoins.
        </p>
      }
      width={6}
    >
      Regex
    </FormLabel>
    <Switch
      onChange={[Function]}
      value={false}
    />
  </div>
  <div
    className="gf-form-inline"
  >
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Controls processing of data during data retrieval. Refer
           
          <a
            href="https://slacmshankar.github.io/epicsarchiver_docs/userguide.html"
            rel="noopener noreferrer"
            target="_blank"
          >
            Archiver Appliance User Guide
          </a>
           
          about processing of data. Special operator 
          <code>
            raw
          </code>
           and 
          <code>
            last
          </code>
           are also available.
           
          <code>
            raw
          </code>
           allows to retrieve the data without processing. 
          <code>
            last
          </code>
           allows to retrieve the last data in the specified time range.
        </p>
      }
      width={6}
    >
      Operator
    </FormLabel>
    <div
      className="max-width-30 gf-form-spacing"
    >
      <Autosuggest
        alwaysRenderSuggestions={false}
        containerProps={Object {}}
        focusInputOnSuggestionClick={true}
        getSuggestionValue={[Function]}
        highlightFirstSuggestion={false}
        id="1"
        inputProps={
          Object {
            "className": "gf-form-input",
            "onBlur": [MockFunction],
            "onChange": [Function],
            "onKeyDown": [Function],
            "placeholder": "mean",
            "spellCheck": false,
            "value": "mean",
          }
        }
        multiSection={false}
        onSuggestionSelected={[Function]}
        onSuggestionsClearRequested={[Function]}
        onSuggestionsFetchRequested={[Function]}
        renderSuggestion={[Function]}
        renderSuggestionsContainer={[Function]}
        shouldKeepSuggestionsOnSelect={[Function]}
        shouldRenderSuggestions={[Function]}
        suggestions={Array []}
        theme={
          Object {
            "container": "react-autosuggest__container",
            "containerOpen": "react-autosuggest__container--open",
            "input": "react-autosuggest__input",
            "inputFocused": "react-autosuggest__input--focused",
            "inputOpen": "react-autosuggest__input--open",
            "sectionContainer": "react-autosuggest__section-container",
            "sectionContainerFirst": "react-autosuggest__section-container--first",
            "sectionTitle": "react-autosuggest__section-title",
            "suggestion": "react-autosuggest__suggestion",
            "suggestionFirst": "react-autosuggest__suggestion--first",
            "suggestionHighlighted": "react-autosuggest__suggestion--highlighted",
            "suggestionsContainer": "react-autosuggest__suggestions-container",
            "suggestionsContainerOpen": "react-autosuggest__suggestions-container--open",
            "suggestionsList": "react-autosuggest__suggestions-list",
          }
        }
      />
    </div>
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Stream allows to periodically update the data without refreshing the dashboard. The difference data from the last updated values is only retrieved.
        </p>
      }
      width={6}
    >
      Stream
    </FormLabel>
    <Switch
      className="gf-form-spacing"
      onChange={[Function]}
      value={false}
    />
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Streaming interval in milliseconds. You can also use a number with unit. e.g. 
          <code>
            1s
          </code>
          ,
           
          <code>
            1m
          </code>
          , 
          <code>
            1h
          </code>
          . The default is determined by width of panel and time range.
        </p>
      }
      width={6}
    >
      Interval
    </FormLabel>
    <input
      className="gf-form-input max-width-7"
      onBlur={[MockFunction]}
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="auto"
      type="text"
      value=""
    />
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          The stream data is stored in a circular buffer. Capacity determines the buffer size. The default is detemined by initial data size.
        </p>
      }
      width={6}
    >
      Capacity
    </FormLabel>
    <input
      className="gf-form-input max-width-7"
      onBlur={[MockFunction]}
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="auto"
      type="text"
      value=""
    />
  </div>
  <div
    className="gf-form"
  >
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Set alias for the legend.
        </p>
      }
      width={6}
    >
      Alias
    </FormLabel>
    <input
      className="gf-form-input max-width-30"
      onBlur={[MockFunction]}
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="Alias"
      style={Object {}}
      type="text"
      value="alias"
    />
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Set regular expressoin pattern to use PV name for legend alias. Alias pattern is used to match PV name. Matched characters within parentheses can be used in 
          <code>
            Alias
          </code>
           text input like 
          <code>
            $1
          </code>
          ,
           
          <code>
            $2
          </code>
          , â€¦, 
          <code>
            $n
          </code>
          . Refer the
           
          <a
            href="https://sasaki77.github.io/archiverappliance-datasource/query.html#legend-alias-with-regex-pattern"
            rel="noopener noreferrer"
            target="_blank"
          >
            documentation
          </a>
           
          for more detail.
        </p>
      }
      width={6}
    >
      Pattern
    </FormLabel>
    <input
      className="gf-form-input max-width-30"
      onBlur={[MockFunction]}
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="Alias regex pattern"
      style={
        Object {
          "color": "#d69e2e",
        }
      }
      type="text"
      value=""
    />
  </div>
  <Functions
    funcs={Array []}
    onChange={[Function]}
    onRunQuery={[MockFunction]}
  />
</Fragment>
`;

exports[`Render Editor with basic options should render regex mode 1`] = `
<Fragment>
  <div
    className="gf-form-inline"
  >
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Set PV name to be visualized. It is allowed to set multiple PVs by using Regular Expressoins alternation pattern (e.g. 
          <code>
            (PV:1|PV:2)
          </code>
          )
        </p>
      }
      width={6}
    >
      PV
    </FormLabel>
    <div
      className="max-width-30 gf-form-spacing"
    >
      <Autosuggest
        alwaysRenderSuggestions={false}
        containerProps={Object {}}
        focusInputOnSuggestionClick={true}
        getSuggestionValue={[Function]}
        highlightFirstSuggestion={false}
        id="1"
        inputProps={
          Object {
            "className": "gf-form-input",
            "onBlur": [MockFunction],
            "onChange": [Function],
            "onKeyDown": [Function],
            "placeholder": "PV name",
            "spellCheck": false,
            "style": Object {
              "color": "#d69e2e",
            },
            "value": "",
          }
        }
        multiSection={false}
        onSuggestionSelected={[Function]}
        onSuggestionsClearRequested={[Function]}
        onSuggestionsFetchRequested={[Function]}
        renderSuggestion={[Function]}
        renderSuggestionsContainer={[Function]}
        shouldKeepSuggestionsOnSelect={[Function]}
        shouldRenderSuggestions={[Function]}
        suggestions={Array []}
        theme={
          Object {
            "container": "react-autosuggest__container",
            "containerOpen": "react-autosuggest__container--open",
            "input": "react-autosuggest__input",
            "inputFocused": "react-autosuggest__input--focused",
            "inputOpen": "react-autosuggest__input--open",
            "sectionContainer": "react-autosuggest__section-container",
            "sectionContainerFirst": "react-autosuggest__section-container--first",
            "sectionTitle": "react-autosuggest__section-title",
            "suggestion": "react-autosuggest__suggestion",
            "suggestionFirst": "react-autosuggest__suggestion--first",
            "suggestionHighlighted": "react-autosuggest__suggestion--highlighted",
            "suggestionsContainer": "react-autosuggest__suggestions-container",
            "suggestionsContainerOpen": "react-autosuggest__suggestions-container--open",
            "suggestionsList": "react-autosuggest__suggestions-list",
          }
        }
      />
    </div>
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Enable/Disable Regex mode. You can select multiple PVs using Regular Expressoins.
        </p>
      }
      width={6}
    >
      Regex
    </FormLabel>
    <Switch
      onChange={[Function]}
      value={true}
    />
  </div>
  <div
    className="gf-form-inline"
  >
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Controls processing of data during data retrieval. Refer
           
          <a
            href="https://slacmshankar.github.io/epicsarchiver_docs/userguide.html"
            rel="noopener noreferrer"
            target="_blank"
          >
            Archiver Appliance User Guide
          </a>
           
          about processing of data. Special operator 
          <code>
            raw
          </code>
           and 
          <code>
            last
          </code>
           are also available.
           
          <code>
            raw
          </code>
           allows to retrieve the data without processing. 
          <code>
            last
          </code>
           allows to retrieve the last data in the specified time range.
        </p>
      }
      width={6}
    >
      Operator
    </FormLabel>
    <div
      className="max-width-30 gf-form-spacing"
    >
      <Autosuggest
        alwaysRenderSuggestions={false}
        containerProps={Object {}}
        focusInputOnSuggestionClick={true}
        getSuggestionValue={[Function]}
        highlightFirstSuggestion={false}
        id="1"
        inputProps={
          Object {
            "className": "gf-form-input",
            "onBlur": [MockFunction],
            "onChange": [Function],
            "onKeyDown": [Function],
            "placeholder": "mean",
            "spellCheck": false,
            "value": "",
          }
        }
        multiSection={false}
        onSuggestionSelected={[Function]}
        onSuggestionsClearRequested={[Function]}
        onSuggestionsFetchRequested={[Function]}
        renderSuggestion={[Function]}
        renderSuggestionsContainer={[Function]}
        shouldKeepSuggestionsOnSelect={[Function]}
        shouldRenderSuggestions={[Function]}
        suggestions={Array []}
        theme={
          Object {
            "container": "react-autosuggest__container",
            "containerOpen": "react-autosuggest__container--open",
            "input": "react-autosuggest__input",
            "inputFocused": "react-autosuggest__input--focused",
            "inputOpen": "react-autosuggest__input--open",
            "sectionContainer": "react-autosuggest__section-container",
            "sectionContainerFirst": "react-autosuggest__section-container--first",
            "sectionTitle": "react-autosuggest__section-title",
            "suggestion": "react-autosuggest__suggestion",
            "suggestionFirst": "react-autosuggest__suggestion--first",
            "suggestionHighlighted": "react-autosuggest__suggestion--highlighted",
            "suggestionsContainer": "react-autosuggest__suggestions-container",
            "suggestionsContainerOpen": "react-autosuggest__suggestions-container--open",
            "suggestionsList": "react-autosuggest__suggestions-list",
          }
        }
      />
    </div>
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Stream allows to periodically update the data without refreshing the dashboard. The difference data from the last updated values is only retrieved.
        </p>
      }
      width={6}
    >
      Stream
    </FormLabel>
    <Switch
      className="gf-form-spacing"
      onChange={[Function]}
      value={false}
    />
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Streaming interval in milliseconds. You can also use a number with unit. e.g. 
          <code>
            1s
          </code>
          ,
           
          <code>
            1m
          </code>
          , 
          <code>
            1h
          </code>
          . The default is determined by width of panel and time range.
        </p>
      }
      width={6}
    >
      Interval
    </FormLabel>
    <input
      className="gf-form-input max-width-7"
      onBlur={[MockFunction]}
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="auto"
      type="text"
      value=""
    />
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          The stream data is stored in a circular buffer. Capacity determines the buffer size. The default is detemined by initial data size.
        </p>
      }
      width={6}
    >
      Capacity
    </FormLabel>
    <input
      className="gf-form-input max-width-7"
      onBlur={[MockFunction]}
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="auto"
      type="text"
      value=""
    />
  </div>
  <div
    className="gf-form"
  >
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Set alias for the legend.
        </p>
      }
      width={6}
    >
      Alias
    </FormLabel>
    <input
      className="gf-form-input max-width-30"
      onBlur={[MockFunction]}
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="Alias"
      style={Object {}}
      type="text"
      value=""
    />
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Set regular expressoin pattern to use PV name for legend alias. Alias pattern is used to match PV name. Matched characters within parentheses can be used in 
          <code>
            Alias
          </code>
           text input like 
          <code>
            $1
          </code>
          ,
           
          <code>
            $2
          </code>
          , â€¦, 
          <code>
            $n
          </code>
          . Refer the
           
          <a
            href="https://sasaki77.github.io/archiverappliance-datasource/query.html#legend-alias-with-regex-pattern"
            rel="noopener noreferrer"
            target="_blank"
          >
            documentation
          </a>
           
          for more detail.
        </p>
      }
      width={6}
    >
      Pattern
    </FormLabel>
    <input
      className="gf-form-input max-width-30"
      onBlur={[MockFunction]}
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="Alias regex pattern"
      style={
        Object {
          "color": "#d69e2e",
        }
      }
      type="text"
      value=""
    />
  </div>
  <Functions
    funcs={Array []}
    onChange={[Function]}
    onRunQuery={[MockFunction]}
  />
</Fragment>
`;

exports[`Render Editor with basic options should render with alias pattern 1`] = `
<Fragment>
  <div
    className="gf-form-inline"
  >
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Set PV name to be visualized. It is allowed to set multiple PVs by using Regular Expressoins alternation pattern (e.g. 
          <code>
            (PV:1|PV:2)
          </code>
          )
        </p>
      }
      width={6}
    >
      PV
    </FormLabel>
    <div
      className="max-width-30 gf-form-spacing"
    >
      <Autosuggest
        alwaysRenderSuggestions={false}
        containerProps={Object {}}
        focusInputOnSuggestionClick={true}
        getSuggestionValue={[Function]}
        highlightFirstSuggestion={false}
        id="1"
        inputProps={
          Object {
            "className": "gf-form-input",
            "onBlur": [MockFunction],
            "onChange": [Function],
            "onKeyDown": [Function],
            "placeholder": "PV name",
            "spellCheck": false,
            "style": Object {},
            "value": "",
          }
        }
        multiSection={false}
        onSuggestionSelected={[Function]}
        onSuggestionsClearRequested={[Function]}
        onSuggestionsFetchRequested={[Function]}
        renderSuggestion={[Function]}
        renderSuggestionsContainer={[Function]}
        shouldKeepSuggestionsOnSelect={[Function]}
        shouldRenderSuggestions={[Function]}
        suggestions={Array []}
        theme={
          Object {
            "container": "react-autosuggest__container",
            "containerOpen": "react-autosuggest__container--open",
            "input": "react-autosuggest__input",
            "inputFocused": "react-autosuggest__input--focused",
            "inputOpen": "react-autosuggest__input--open",
            "sectionContainer": "react-autosuggest__section-container",
            "sectionContainerFirst": "react-autosuggest__section-container--first",
            "sectionTitle": "react-autosuggest__section-title",
            "suggestion": "react-autosuggest__suggestion",
            "suggestionFirst": "react-autosuggest__suggestion--first",
            "suggestionHighlighted": "react-autosuggest__suggestion--highlighted",
            "suggestionsContainer": "react-autosuggest__suggestions-container",
            "suggestionsContainerOpen": "react-autosuggest__suggestions-container--open",
            "suggestionsList": "react-autosuggest__suggestions-list",
          }
        }
      />
    </div>
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Enable/Disable Regex mode. You can select multiple PVs using Regular Expressoins.
        </p>
      }
      width={6}
    >
      Regex
    </FormLabel>
    <Switch
      onChange={[Function]}
      value={false}
    />
  </div>
  <div
    className="gf-form-inline"
  >
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Controls processing of data during data retrieval. Refer
           
          <a
            href="https://slacmshankar.github.io/epicsarchiver_docs/userguide.html"
            rel="noopener noreferrer"
            target="_blank"
          >
            Archiver Appliance User Guide
          </a>
           
          about processing of data. Special operator 
          <code>
            raw
          </code>
           and 
          <code>
            last
          </code>
           are also available.
           
          <code>
            raw
          </code>
           allows to retrieve the data without processing. 
          <code>
            last
          </code>
           allows to retrieve the last data in the specified time range.
        </p>
      }
      width={6}
    >
      Operator
    </FormLabel>
    <div
      className="max-width-30 gf-form-spacing"
    >
      <Autosuggest
        alwaysRenderSuggestions={false}
        containerProps={Object {}}
        focusInputOnSuggestionClick={true}
        getSuggestionValue={[Function]}
        highlightFirstSuggestion={false}
        id="1"
        inputProps={
          Object {
            "className": "gf-form-input",
            "onBlur": [MockFunction],
            "onChange": [Function],
            "onKeyDown": [Function],
            "placeholder": "mean",
            "spellCheck": false,
            "value": "",
          }
        }
        multiSection={false}
        onSuggestionSelected={[Function]}
        onSuggestionsClearRequested={[Function]}
        onSuggestionsFetchRequested={[Function]}
        renderSuggestion={[Function]}
        renderSuggestionsContainer={[Function]}
        shouldKeepSuggestionsOnSelect={[Function]}
        shouldRenderSuggestions={[Function]}
        suggestions={Array []}
        theme={
          Object {
            "container": "react-autosuggest__container",
            "containerOpen": "react-autosuggest__container--open",
            "input": "react-autosuggest__input",
            "inputFocused": "react-autosuggest__input--focused",
            "inputOpen": "react-autosuggest__input--open",
            "sectionContainer": "react-autosuggest__section-container",
            "sectionContainerFirst": "react-autosuggest__section-container--first",
            "sectionTitle": "react-autosuggest__section-title",
            "suggestion": "react-autosuggest__suggestion",
            "suggestionFirst": "react-autosuggest__suggestion--first",
            "suggestionHighlighted": "react-autosuggest__suggestion--highlighted",
            "suggestionsContainer": "react-autosuggest__suggestions-container",
            "suggestionsContainerOpen": "react-autosuggest__suggestions-container--open",
            "suggestionsList": "react-autosuggest__suggestions-list",
          }
        }
      />
    </div>
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Stream allows to periodically update the data without refreshing the dashboard. The difference data from the last updated values is only retrieved.
        </p>
      }
      width={6}
    >
      Stream
    </FormLabel>
    <Switch
      className="gf-form-spacing"
      onChange={[Function]}
      value={false}
    />
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Streaming interval in milliseconds. You can also use a number with unit. e.g. 
          <code>
            1s
          </code>
          ,
           
          <code>
            1m
          </code>
          , 
          <code>
            1h
          </code>
          . The default is determined by width of panel and time range.
        </p>
      }
      width={6}
    >
      Interval
    </FormLabel>
    <input
      className="gf-form-input max-width-7"
      onBlur={[MockFunction]}
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="auto"
      type="text"
      value=""
    />
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          The stream data is stored in a circular buffer. Capacity determines the buffer size. The default is detemined by initial data size.
        </p>
      }
      width={6}
    >
      Capacity
    </FormLabel>
    <input
      className="gf-form-input max-width-7"
      onBlur={[MockFunction]}
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="auto"
      type="text"
      value=""
    />
  </div>
  <div
    className="gf-form"
  >
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Set alias for the legend.
        </p>
      }
      width={6}
    >
      Alias
    </FormLabel>
    <input
      className="gf-form-input max-width-30"
      onBlur={[MockFunction]}
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="Alias"
      style={
        Object {
          "color": "#d69e2e",
        }
      }
      type="text"
      value=""
    />
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Set regular expressoin pattern to use PV name for legend alias. Alias pattern is used to match PV name. Matched characters within parentheses can be used in 
          <code>
            Alias
          </code>
           text input like 
          <code>
            $1
          </code>
          ,
           
          <code>
            $2
          </code>
          , â€¦, 
          <code>
            $n
          </code>
          . Refer the
           
          <a
            href="https://sasaki77.github.io/archiverappliance-datasource/query.html#legend-alias-with-regex-pattern"
            rel="noopener noreferrer"
            target="_blank"
          >
            documentation
          </a>
           
          for more detail.
        </p>
      }
      width={6}
    >
      Pattern
    </FormLabel>
    <input
      className="gf-form-input max-width-30"
      onBlur={[MockFunction]}
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="Alias regex pattern"
      style={
        Object {
          "color": "#d69e2e",
        }
      }
      type="text"
      value=".*"
    />
  </div>
  <Functions
    funcs={Array []}
    onChange={[Function]}
    onRunQuery={[MockFunction]}
  />
</Fragment>
`;

exports[`Render Editor with basic options should render with stream 1`] = `
<Fragment>
  <div
    className="gf-form-inline"
  >
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Set PV name to be visualized. It is allowed to set multiple PVs by using Regular Expressoins alternation pattern (e.g. 
          <code>
            (PV:1|PV:2)
          </code>
          )
        </p>
      }
      width={6}
    >
      PV
    </FormLabel>
    <div
      className="max-width-30 gf-form-spacing"
    >
      <Autosuggest
        alwaysRenderSuggestions={false}
        containerProps={Object {}}
        focusInputOnSuggestionClick={true}
        getSuggestionValue={[Function]}
        highlightFirstSuggestion={false}
        id="1"
        inputProps={
          Object {
            "className": "gf-form-input",
            "onBlur": [MockFunction],
            "onChange": [Function],
            "onKeyDown": [Function],
            "placeholder": "PV name",
            "spellCheck": false,
            "style": Object {},
            "value": "",
          }
        }
        multiSection={false}
        onSuggestionSelected={[Function]}
        onSuggestionsClearRequested={[Function]}
        onSuggestionsFetchRequested={[Function]}
        renderSuggestion={[Function]}
        renderSuggestionsContainer={[Function]}
        shouldKeepSuggestionsOnSelect={[Function]}
        shouldRenderSuggestions={[Function]}
        suggestions={Array []}
        theme={
          Object {
            "container": "react-autosuggest__container",
            "containerOpen": "react-autosuggest__container--open",
            "input": "react-autosuggest__input",
            "inputFocused": "react-autosuggest__input--focused",
            "inputOpen": "react-autosuggest__input--open",
            "sectionContainer": "react-autosuggest__section-container",
            "sectionContainerFirst": "react-autosuggest__section-container--first",
            "sectionTitle": "react-autosuggest__section-title",
            "suggestion": "react-autosuggest__suggestion",
            "suggestionFirst": "react-autosuggest__suggestion--first",
            "suggestionHighlighted": "react-autosuggest__suggestion--highlighted",
            "suggestionsContainer": "react-autosuggest__suggestions-container",
            "suggestionsContainerOpen": "react-autosuggest__suggestions-container--open",
            "suggestionsList": "react-autosuggest__suggestions-list",
          }
        }
      />
    </div>
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Enable/Disable Regex mode. You can select multiple PVs using Regular Expressoins.
        </p>
      }
      width={6}
    >
      Regex
    </FormLabel>
    <Switch
      onChange={[Function]}
      value={false}
    />
  </div>
  <div
    className="gf-form-inline"
  >
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Controls processing of data during data retrieval. Refer
           
          <a
            href="https://slacmshankar.github.io/epicsarchiver_docs/userguide.html"
            rel="noopener noreferrer"
            target="_blank"
          >
            Archiver Appliance User Guide
          </a>
           
          about processing of data. Special operator 
          <code>
            raw
          </code>
           and 
          <code>
            last
          </code>
           are also available.
           
          <code>
            raw
          </code>
           allows to retrieve the data without processing. 
          <code>
            last
          </code>
           allows to retrieve the last data in the specified time range.
        </p>
      }
      width={6}
    >
      Operator
    </FormLabel>
    <div
      className="max-width-30 gf-form-spacing"
    >
      <Autosuggest
        alwaysRenderSuggestions={false}
        containerProps={Object {}}
        focusInputOnSuggestionClick={true}
        getSuggestionValue={[Function]}
        highlightFirstSuggestion={false}
        id="1"
        inputProps={
          Object {
            "className": "gf-form-input",
            "onBlur": [MockFunction],
            "onChange": [Function],
            "onKeyDown": [Function],
            "placeholder": "mean",
            "spellCheck": false,
            "value": "",
          }
        }
        multiSection={false}
        onSuggestionSelected={[Function]}
        onSuggestionsClearRequested={[Function]}
        onSuggestionsFetchRequested={[Function]}
        renderSuggestion={[Function]}
        renderSuggestionsContainer={[Function]}
        shouldKeepSuggestionsOnSelect={[Function]}
        shouldRenderSuggestions={[Function]}
        suggestions={Array []}
        theme={
          Object {
            "container": "react-autosuggest__container",
            "containerOpen": "react-autosuggest__container--open",
            "input": "react-autosuggest__input",
            "inputFocused": "react-autosuggest__input--focused",
            "inputOpen": "react-autosuggest__input--open",
            "sectionContainer": "react-autosuggest__section-container",
            "sectionContainerFirst": "react-autosuggest__section-container--first",
            "sectionTitle": "react-autosuggest__section-title",
            "suggestion": "react-autosuggest__suggestion",
            "suggestionFirst": "react-autosuggest__suggestion--first",
            "suggestionHighlighted": "react-autosuggest__suggestion--highlighted",
            "suggestionsContainer": "react-autosuggest__suggestions-container",
            "suggestionsContainerOpen": "react-autosuggest__suggestions-container--open",
            "suggestionsList": "react-autosuggest__suggestions-list",
          }
        }
      />
    </div>
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Stream allows to periodically update the data without refreshing the dashboard. The difference data from the last updated values is only retrieved.
        </p>
      }
      width={6}
    >
      Stream
    </FormLabel>
    <Switch
      className="gf-form-spacing"
      onChange={[Function]}
      value={true}
    />
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Streaming interval in milliseconds. You can also use a number with unit. e.g. 
          <code>
            1s
          </code>
          ,
           
          <code>
            1m
          </code>
          , 
          <code>
            1h
          </code>
          . The default is determined by width of panel and time range.
        </p>
      }
      width={6}
    >
      Interval
    </FormLabel>
    <input
      className="gf-form-input max-width-7"
      onBlur={[MockFunction]}
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="auto"
      type="text"
      value=""
    />
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          The stream data is stored in a circular buffer. Capacity determines the buffer size. The default is detemined by initial data size.
        </p>
      }
      width={6}
    >
      Capacity
    </FormLabel>
    <input
      className="gf-form-input max-width-7"
      onBlur={[MockFunction]}
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="auto"
      type="text"
      value=""
    />
  </div>
  <div
    className="gf-form"
  >
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Set alias for the legend.
        </p>
      }
      width={6}
    >
      Alias
    </FormLabel>
    <input
      className="gf-form-input max-width-30"
      onBlur={[MockFunction]}
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="Alias"
      style={Object {}}
      type="text"
      value=""
    />
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Set regular expressoin pattern to use PV name for legend alias. Alias pattern is used to match PV name. Matched characters within parentheses can be used in 
          <code>
            Alias
          </code>
           text input like 
          <code>
            $1
          </code>
          ,
           
          <code>
            $2
          </code>
          , â€¦, 
          <code>
            $n
          </code>
          . Refer the
           
          <a
            href="https://sasaki77.github.io/archiverappliance-datasource/query.html#legend-alias-with-regex-pattern"
            rel="noopener noreferrer"
            target="_blank"
          >
            documentation
          </a>
           
          for more detail.
        </p>
      }
      width={6}
    >
      Pattern
    </FormLabel>
    <input
      className="gf-form-input max-width-30"
      onBlur={[MockFunction]}
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="Alias regex pattern"
      style={
        Object {
          "color": "#d69e2e",
        }
      }
      type="text"
      value=""
    />
  </div>
  <Functions
    funcs={Array []}
    onChange={[Function]}
    onRunQuery={[MockFunction]}
  />
</Fragment>
`;

exports[`Render Editor with basic options should render with top function 1`] = `
<Fragment>
  <div
    className="gf-form-inline"
  >
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Set PV name to be visualized. It is allowed to set multiple PVs by using Regular Expressoins alternation pattern (e.g. 
          <code>
            (PV:1|PV:2)
          </code>
          )
        </p>
      }
      width={6}
    >
      PV
    </FormLabel>
    <div
      className="max-width-30 gf-form-spacing"
    >
      <Autosuggest
        alwaysRenderSuggestions={false}
        containerProps={Object {}}
        focusInputOnSuggestionClick={true}
        getSuggestionValue={[Function]}
        highlightFirstSuggestion={false}
        id="1"
        inputProps={
          Object {
            "className": "gf-form-input",
            "onBlur": [MockFunction],
            "onChange": [Function],
            "onKeyDown": [Function],
            "placeholder": "PV name",
            "spellCheck": false,
            "style": Object {},
            "value": "",
          }
        }
        multiSection={false}
        onSuggestionSelected={[Function]}
        onSuggestionsClearRequested={[Function]}
        onSuggestionsFetchRequested={[Function]}
        renderSuggestion={[Function]}
        renderSuggestionsContainer={[Function]}
        shouldKeepSuggestionsOnSelect={[Function]}
        shouldRenderSuggestions={[Function]}
        suggestions={Array []}
        theme={
          Object {
            "container": "react-autosuggest__container",
            "containerOpen": "react-autosuggest__container--open",
            "input": "react-autosuggest__input",
            "inputFocused": "react-autosuggest__input--focused",
            "inputOpen": "react-autosuggest__input--open",
            "sectionContainer": "react-autosuggest__section-container",
            "sectionContainerFirst": "react-autosuggest__section-container--first",
            "sectionTitle": "react-autosuggest__section-title",
            "suggestion": "react-autosuggest__suggestion",
            "suggestionFirst": "react-autosuggest__suggestion--first",
            "suggestionHighlighted": "react-autosuggest__suggestion--highlighted",
            "suggestionsContainer": "react-autosuggest__suggestions-container",
            "suggestionsContainerOpen": "react-autosuggest__suggestions-container--open",
            "suggestionsList": "react-autosuggest__suggestions-list",
          }
        }
      />
    </div>
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Enable/Disable Regex mode. You can select multiple PVs using Regular Expressoins.
        </p>
      }
      width={6}
    >
      Regex
    </FormLabel>
    <Switch
      onChange={[Function]}
      value={false}
    />
  </div>
  <div
    className="gf-form-inline"
  >
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Controls processing of data during data retrieval. Refer
           
          <a
            href="https://slacmshankar.github.io/epicsarchiver_docs/userguide.html"
            rel="noopener noreferrer"
            target="_blank"
          >
            Archiver Appliance User Guide
          </a>
           
          about processing of data. Special operator 
          <code>
            raw
          </code>
           and 
          <code>
            last
          </code>
           are also available.
           
          <code>
            raw
          </code>
           allows to retrieve the data without processing. 
          <code>
            last
          </code>
           allows to retrieve the last data in the specified time range.
        </p>
      }
      width={6}
    >
      Operator
    </FormLabel>
    <div
      className="max-width-30 gf-form-spacing"
    >
      <Autosuggest
        alwaysRenderSuggestions={false}
        containerProps={Object {}}
        focusInputOnSuggestionClick={true}
        getSuggestionValue={[Function]}
        highlightFirstSuggestion={false}
        id="1"
        inputProps={
          Object {
            "className": "gf-form-input",
            "onBlur": [MockFunction],
            "onChange": [Function],
            "onKeyDown": [Function],
            "placeholder": "mean",
            "spellCheck": false,
            "value": "",
          }
        }
        multiSection={false}
        onSuggestionSelected={[Function]}
        onSuggestionsClearRequested={[Function]}
        onSuggestionsFetchRequested={[Function]}
        renderSuggestion={[Function]}
        renderSuggestionsContainer={[Function]}
        shouldKeepSuggestionsOnSelect={[Function]}
        shouldRenderSuggestions={[Function]}
        suggestions={Array []}
        theme={
          Object {
            "container": "react-autosuggest__container",
            "containerOpen": "react-autosuggest__container--open",
            "input": "react-autosuggest__input",
            "inputFocused": "react-autosuggest__input--focused",
            "inputOpen": "react-autosuggest__input--open",
            "sectionContainer": "react-autosuggest__section-container",
            "sectionContainerFirst": "react-autosuggest__section-container--first",
            "sectionTitle": "react-autosuggest__section-title",
            "suggestion": "react-autosuggest__suggestion",
            "suggestionFirst": "react-autosuggest__suggestion--first",
            "suggestionHighlighted": "react-autosuggest__suggestion--highlighted",
            "suggestionsContainer": "react-autosuggest__suggestions-container",
            "suggestionsContainerOpen": "react-autosuggest__suggestions-container--open",
            "suggestionsList": "react-autosuggest__suggestions-list",
          }
        }
      />
    </div>
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Stream allows to periodically update the data without refreshing the dashboard. The difference data from the last updated values is only retrieved.
        </p>
      }
      width={6}
    >
      Stream
    </FormLabel>
    <Switch
      className="gf-form-spacing"
      onChange={[Function]}
      value={false}
    />
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Streaming interval in milliseconds. You can also use a number with unit. e.g. 
          <code>
            1s
          </code>
          ,
           
          <code>
            1m
          </code>
          , 
          <code>
            1h
          </code>
          . The default is determined by width of panel and time range.
        </p>
      }
      width={6}
    >
      Interval
    </FormLabel>
    <input
      className="gf-form-input max-width-7"
      onBlur={[MockFunction]}
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="auto"
      type="text"
      value=""
    />
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          The stream data is stored in a circular buffer. Capacity determines the buffer size. The default is detemined by initial data size.
        </p>
      }
      width={6}
    >
      Capacity
    </FormLabel>
    <input
      className="gf-form-input max-width-7"
      onBlur={[MockFunction]}
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="auto"
      type="text"
      value=""
    />
  </div>
  <div
    className="gf-form"
  >
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Set alias for the legend.
        </p>
      }
      width={6}
    >
      Alias
    </FormLabel>
    <input
      className="gf-form-input max-width-30"
      onBlur={[MockFunction]}
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="Alias"
      style={Object {}}
      type="text"
      value=""
    />
    <FormLabel
      className="query-keyword"
      tooltip={
        <p>
          Set regular expressoin pattern to use PV name for legend alias. Alias pattern is used to match PV name. Matched characters within parentheses can be used in 
          <code>
            Alias
          </code>
           text input like 
          <code>
            $1
          </code>
          ,
           
          <code>
            $2
          </code>
          , â€¦, 
          <code>
            $n
          </code>
          . Refer the
           
          <a
            href="https://sasaki77.github.io/archiverappliance-datasource/query.html#legend-alias-with-regex-pattern"
            rel="noopener noreferrer"
            target="_blank"
          >
            documentation
          </a>
           
          for more detail.
        </p>
      }
      width={6}
    >
      Pattern
    </FormLabel>
    <input
      className="gf-form-input max-width-30"
      onBlur={[MockFunction]}
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="Alias regex pattern"
      style={
        Object {
          "color": "#d69e2e",
        }
      }
      type="text"
      value=""
    />
  </div>
  <Functions
    funcs={
      Array [
        Object {
          "def": Object {
            "category": "Filter Series",
            "defaultParams": Array [
              5,
              "avg",
            ],
            "name": "top",
            "params": Array [
              Object {
                "name": "number",
                "type": "int",
              },
              Object {
                "name": "value",
                "options": Array [
                  "avg",
                  "min",
                  "max",
                  "absoluteMin",
                  "absoluteMax",
                  "sum",
                ],
                "type": "string",
              },
            ],
          },
          "params": Array [
            "5",
            "avg",
          ],
          "text": "top(5, avg)",
        },
      ]
    }
    onChange={[Function]}
    onRunQuery={[MockFunction]}
  />
</Fragment>
`;
